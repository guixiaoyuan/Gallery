apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    defaultConfig {
        applicationId 'com.tct.gallery3d'
        minSdkVersion 22
        targetSdkVersion 24
        versionCode Integer.valueOf("0416102902")
        versionName "v7.1.1.0.0402.0"
        renderscriptTargetApi 22
        renderscriptSupportModeEnabled true
        multiDexEnabled true
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }

    sourceSets {
        main {
            def src = ['src/main/java', 'tct-src', 'src_pd']
//            def src = ['./src/main/java']
//            def resFolder = ['src/main/res']
//            def assetsFolder = ['assets']
//            def libsFolder = ['libs']

//            manifest.srcFile file('./src/main/AndroidManifest.xml')
            java.srcDirs = src
//            resources.srcDirs = src
//            aidl.srcDirs = src
//            renderscript.srcDirs = src
//            renderscript.srcDirs = ['src/main/rs']
//            res.srcDirs = resFolder
//            assets.srcDirs = assetsFolder
//            jniLibs.srcDirs = libsFolder

        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

}

dependencies {
    provided files(getLayoutLibPath())
    //    provided files(getRenderscriptLibPath())
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'libs', include: ['*/*.so'])
    testCompile 'junit:junit:4.12'
    //    compile files('libs/renderscript-v8.jar')
    compile project(':gallerycommon')
    compile 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'
    compile 'com.android.support:appcompat-v7:24.0.0-alpha2'
    compile 'com.android.support:support-v4:24.0.0'
    compile 'com.android.support:support-v13:24.0.0'
    compile 'com.android.support:design:24.0.0'
    compile 'com.android.support:recyclerview-v7:24.0.0'
    compile 'com.android.support:cardview-v7:24.0.0'
    compile 'com.google.android.gms:play-services:9.2.1'
    compile 'com.google.android.gms:play-services-ads:9.2.1'
    compile 'com.google.android.gms:play-services-auth:9.2.1'
    compile 'com.google.android.gms:play-services-gcm:9.2.1'
    compile 'com.android.support:multidex:1.0.1'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.2.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
}

//def getCurrentDate() {
//    def now = new Date().format('yyMMdd');
//    return now;
//}

// must called after "android" definition
def getLayoutLibPath() {
    def rootDir;
    rootDir = "${android.getSdkDirectory().getAbsolutePath()}" + "/platforms/" + android.compileSdkVersion + "/data/layoutlib.jar"
    Console.println(rootDir)
    return rootDir
}

// must called after "android" definition
//def getRenderscriptLibPath() {
//    def rootDir;
//    rootDir = "${android.getSdkDirectory().getAbsolutePath()}" + "/build-tools/" + android.buildToolsVersion + "/renderscript/lib/renderscript-v8.jar"
//    Console.println(rootDir)
//    return rootDir
//}
